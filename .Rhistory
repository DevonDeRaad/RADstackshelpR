write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
write.vcf(vc.275, file = "~/Desktop/RADstackshelpR/inst/extdata/m4.vcf.gz")
write.vcf(vc.250, file = "~/Desktop/RADstackshelpR/inst/extdata/m5.vcf.gz")
write.vcf(vc.225, file = "~/Desktop/RADstackshelpR/inst/extdata/m6.vcf.gz")
write.vcf(vc.200, file = "~/Desktop/RADstackshelpR/inst/extdata/m7.vcf.gz")
system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR")
test_that("optimize_m generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 25)
})
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.m)
vcffog<-read.vcfR("~/Desktop/hipposideros/m_3.vcf")
vc.300<-vcffog[sample.int(110576, 150)]
vc.275<-vcffog[sample.int(110576, 125)]
vc.250<-vcffog[sample.int(110576, 100)]
vc.225<-vcffog[sample.int(110576, 75)]
vc.200<-vcffog[sample.int(110576, 50)]
write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
write.vcf(vc.275, file = "~/Desktop/RADstackshelpR/inst/extdata/m4.vcf.gz")
write.vcf(vc.250, file = "~/Desktop/RADstackshelpR/inst/extdata/m5.vcf.gz")
write.vcf(vc.225, file = "~/Desktop/RADstackshelpR/inst/extdata/m6.vcf.gz")
write.vcf(vc.200, file = "~/Desktop/RADstackshelpR/inst/extdata/m7.vcf.gz")
vis_loci(opt.m)
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.m)
vc.300<-vcffog[sample.int(110576, 90)]
vc.275<-vcffog[sample.int(110576, 80)]
vc.250<-vcffog[sample.int(110576, 70)]
vc.225<-vcffog[sample.int(110576, 60)]
vc.200<-vcffog[sample.int(110576, 50)]
write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
write.vcf(vc.275, file = "~/Desktop/RADstackshelpR/inst/extdata/m4.vcf.gz")
write.vcf(vc.250, file = "~/Desktop/RADstackshelpR/inst/extdata/m5.vcf.gz")
write.vcf(vc.225, file = "~/Desktop/RADstackshelpR/inst/extdata/m6.vcf.gz")
write.vcf(vc.200, file = "~/Desktop/RADstackshelpR/inst/extdata/m7.vcf.gz")
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.m)
vc.300<-vcffog[sample.int(110576, 90)]
vc.275<-vcffog[sample.int(110576, 80)]
vc.250<-vcffog[sample.int(110576, 70)]
vc.225<-vcffog[sample.int(110576, 60)]
vc.200<-vcffog[sample.int(110576, 50)]
write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
write.vcf(vc.275, file = "~/Desktop/RADstackshelpR/inst/extdata/m4.vcf.gz")
write.vcf(vc.250, file = "~/Desktop/RADstackshelpR/inst/extdata/m5.vcf.gz")
write.vcf(vc.225, file = "~/Desktop/RADstackshelpR/inst/extdata/m6.vcf.gz")
write.vcf(vc.200, file = "~/Desktop/RADstackshelpR/inst/extdata/m7.vcf.gz")
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.m)
vc.300<-vcffog[sample.int(110576, 90)]
vc.275<-vcffog[sample.int(110576, 80)]
vc.250<-vcffog[sample.int(110576, 70)]
vc.225<-vcffog[sample.int(110576, 60)]
vc.200<-vcffog[sample.int(110576, 50)]
write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
write.vcf(vc.275, file = "~/Desktop/RADstackshelpR/inst/extdata/m4.vcf.gz")
write.vcf(vc.250, file = "~/Desktop/RADstackshelpR/inst/extdata/m5.vcf.gz")
write.vcf(vc.225, file = "~/Desktop/RADstackshelpR/inst/extdata/m6.vcf.gz")
write.vcf(vc.200, file = "~/Desktop/RADstackshelpR/inst/extdata/m7.vcf.gz")
vc.300<-vcffog[sample.int(110576, 90), c(1:20)]
vc.275<-vcffog[sample.int(110576, 80), c(1:20)]
vc.250<-vcffog[sample.int(110576, 70), c(1:20)]
vc.225<-vcffog[sample.int(110576, 60), c(1:20)]
vc.200<-vcffog[sample.int(110576, 50), c(1:20)]
write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
write.vcf(vc.275, file = "~/Desktop/RADstackshelpR/inst/extdata/m4.vcf.gz")
write.vcf(vc.250, file = "~/Desktop/RADstackshelpR/inst/extdata/m5.vcf.gz")
write.vcf(vc.225, file = "~/Desktop/RADstackshelpR/inst/extdata/m6.vcf.gz")
write.vcf(vc.200, file = "~/Desktop/RADstackshelpR/inst/extdata/m7.vcf.gz")
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.m)
vc.300<-vcffog[sample.int(110576, 90), c(1:20)]
vc.275<-vcffog[sample.int(110576, 80), c(1:20)]
vc.250<-vcffog[sample.int(110576, 70), c(1:20)]
vc.225<-vcffog[sample.int(110576, 60), c(1:20)]
vc.200<-vcffog[sample.int(110576, 50), c(1:20)]
write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
write.vcf(vc.275, file = "~/Desktop/RADstackshelpR/inst/extdata/m4.vcf.gz")
write.vcf(vc.250, file = "~/Desktop/RADstackshelpR/inst/extdata/m5.vcf.gz")
write.vcf(vc.225, file = "~/Desktop/RADstackshelpR/inst/extdata/m6.vcf.gz")
write.vcf(vc.200, file = "~/Desktop/RADstackshelpR/inst/extdata/m7.vcf.gz")
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.m)
vc.300<-vcffog[sample.int(110576, 100), c(1:20)]
vc.275<-vcffog[sample.int(110576, 80), c(1:20)]
vc.250<-vcffog[sample.int(110576, 70), c(1:20)]
vc.225<-vcffog[sample.int(110576, 60), c(1:20)]
vc.200<-vcffog[sample.int(110576, 50), c(1:20)]
write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
write.vcf(vc.275, file = "~/Desktop/RADstackshelpR/inst/extdata/m4.vcf.gz")
write.vcf(vc.250, file = "~/Desktop/RADstackshelpR/inst/extdata/m5.vcf.gz")
write.vcf(vc.225, file = "~/Desktop/RADstackshelpR/inst/extdata/m6.vcf.gz")
write.vcf(vc.200, file = "~/Desktop/RADstackshelpR/inst/extdata/m7.vcf.gz")
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.m)
vc.300<-vcffog[sample.int(110576, 90), c(1:20)]
write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.m)
vc.300<-vcffog[sample.int(110576, 90), c(1:20)]
vc.275<-vcffog[sample.int(110576, 80), c(1:20)]
vc.250<-vcffog[sample.int(110576, 70), c(1:20)]
vc.225<-vcffog[sample.int(110576, 60), c(1:20)]
vc.200<-vcffog[sample.int(110576, 50), c(1:20)]
write.vcf(vc.300, file = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
write.vcf(vc.275, file = "~/Desktop/RADstackshelpR/inst/extdata/m4.vcf.gz")
write.vcf(vc.250, file = "~/Desktop/RADstackshelpR/inst/extdata/m5.vcf.gz")
write.vcf(vc.225, file = "~/Desktop/RADstackshelpR/inst/extdata/m6.vcf.gz")
write.vcf(vc.200, file = "~/Desktop/RADstackshelpR/inst/extdata/m7.vcf.gz")
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.m)
#Now do big M
vc.1<-vcffog[sample.int(110576, 100), c(1:20)]
vc.2<-vcffog[sample.int(110576, 90), c(1:20)]
vc.3<-vcffog[sample.int(110576, 80), c(1:20)]
vc.4<-vcffog[sample.int(110576, 70), c(1:20)]
vc.5<-vcffog[sample.int(110576, 60), c(1:20)]
vc.6<-vcffog[sample.int(110576, 50), c(1:20)]
vc.7<-vcffog[sample.int(110576, 40), c(1:20)]
vc.8<-vcffog[sample.int(110576, 30), c(1:20)]
write.vcf(vc.1, file = "~/Desktop/RADstackshelpR/inst/extdata/bigM1.vcf.gz")
write.vcf(vc.2, file = "~/Desktop/RADstackshelpR/inst/extdata/bigM2.vcf.gz")
write.vcf(vc.3, file = "~/Desktop/RADstackshelpR/inst/extdata/bigM3.vcf.gz")
write.vcf(vc.4, file = "~/Desktop/RADstackshelpR/inst/extdata/bigM4.vcf.gz")
write.vcf(vc.5, file = "~/Desktop/RADstackshelpR/inst/extdata/bigM5.vcf.gz")
write.vcf(vc.6, file = "~/Desktop/RADstackshelpR/inst/extdata/bigM6.vcf.gz")
write.vcf(vc.7, file = "~/Desktop/RADstackshelpR/inst/extdata/bigM7.vcf.gz")
write.vcf(vc.8, file = "~/Desktop/RADstackshelpR/inst/extdata/bigM8.vcf.gz")
opt.bigm<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"),
M2 = system.file("extdata", "bigM2.vcf.gz", package = "RADstackshelpR"),
M3 = system.file("extdata", "bigM3.vcf.gz", package = "RADstackshelpR"),
M4 = system.file("extdata", "bigM4.vcf.gz", package = "RADstackshelpR"),
M5 = system.file("extdata", "bigM5.vcf.gz", package = "RADstackshelpR"),
M6 = system.file("extdata", "bigM6.vcf.gz", package = "RADstackshelpR"),
M7 = system.file("extdata", "bigM7.vcf.gz", package = "RADstackshelpR"),
M8 = system.file("extdata", "bigM8.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.bigm)
write.vcf(vc.8, file = "~/Desktop/RADstackshelpR/inst/extdata/nequalsmminus1.vcf.gz")
write.vcf(vc.6, file = "~/Desktop/RADstackshelpR/inst/extdata/nequalsm.vcf.gz")
write.vcf(vc.7, file = "~/Desktop/RADstackshelpR/inst/extdata/nequalsmplus1.vcf.gz")
opt.n<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"),
nequalsM = system.file("extdata", "nequalsm.vcf.gz", package = "RADstackshelpR"),
nequalsMplus1 = system.file("extdata", "nequalsmplus1.vcf.gz", package = "RADstackshelpR"))
vis_loci(opt.n)
test_that("optimize_m generates output of the appropriate class (list)", {
#find data in local directory
#opt.m<-optimize_m(m3 = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list"
expect_is(opt.m, "list" )
})
test_that("optimize_m generates a list with length of 5", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list"
expect_equal(length(opt.m), 5 )
})
test_that("optimize_m generates an error if run with a non-vcf file", {
#expect error trying to read this vector as a vcf file
expect_error(optimize_m(m3 = system.file("extdata", "denovo.stacks.pipeline.sh", package = "RADstackshelpR"))
)
})
test_that("optimize_m generates a list with the appropriate names", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list" with appropriately named components
expect_equal(names(opt.m)[1], "depth")
expect_equal(names(opt.m)[2], "snp")
expect_equal(names(opt.m)[3], "loci")
expect_equal(names(opt.m)[4], "snp.R80")
expect_equal(names(opt.m)[5], "loci.R80")
})
test_that("optimize_m generates a list with each object inside being a dataframe", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list", with each object inside being a "data.frame" object
for (i in length(opt.m)){
expect_is(opt.m[[i]], "data.frame")
}
})
test_that("optimize_m generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 25)
})
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
nrow(opt.m[[1]])
View(opt.m)
opt.m[["depth"]]
test_that("optimize_m generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 95)
})
test_that("optimize_bigM generates output of the appropriate class (list)", {
#find data in local directory
#opt.m<-optimize_bigM(M1 = "~/Desktop/RADstackshelpR/inst/extdata/bigM1.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list"
expect_is(opt.m, "list" )
})
test_that("optimize_bigM generates a list with length of 5", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list"
expect_equal(length(opt.m), 4)
})
test_that("optimize_bigM generates an error if run with a non-vcf file", {
#expect error trying to read this vector as a vcf file
expect_error(optimize_bigM(M1 = system.file("extdata", "denovo.stacks.pipeline.sh", package = "RADstackshelpR"))
)
})
test_that("optimize_bigM generates a list with the appropriate names", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list" with appropriately named components
expect_equal(names(opt.m)[1], "snp")
expect_equal(names(opt.m)[2], "loci")
expect_equal(names(opt.m)[3], "snp.R80")
expect_equal(names(opt.m)[4], "loci.R80")
})
test_that("optimize_bigM generates a list with each object inside being a dataframe", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list", with each object inside being a "data.frame" object
for (i in length(opt.m)){
expect_is(opt.m[[i]], "data.frame")
}
})
test_that("optimize_bigM generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"),
M2 = system.file("extdata", "bigM2.vcf.gz", package = "RADstackshelpR"),
M3 = system.file("extdata", "bigM3.vcf.gz", package = "RADstackshelpR"),
M4 = system.file("extdata", "bigM4.vcf.gz", package = "RADstackshelpR"),
M5 = system.file("extdata", "bigM5.vcf.gz", package = "RADstackshelpR"),
M6 = system.file("extdata", "bigM6.vcf.gz", package = "RADstackshelpR"),
M7 = system.file("extdata", "bigM7.vcf.gz", package = "RADstackshelpR"),
M8 = system.file("extdata", "bigM8.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 40)
})
nrow(opt.m[[1]])
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"),
M2 = system.file("extdata", "bigM2.vcf.gz", package = "RADstackshelpR"),
M3 = system.file("extdata", "bigM3.vcf.gz", package = "RADstackshelpR"),
M4 = system.file("extdata", "bigM4.vcf.gz", package = "RADstackshelpR"),
M5 = system.file("extdata", "bigM5.vcf.gz", package = "RADstackshelpR"),
M6 = system.file("extdata", "bigM6.vcf.gz", package = "RADstackshelpR"),
M7 = system.file("extdata", "bigM7.vcf.gz", package = "RADstackshelpR"),
M8 = system.file("extdata", "bigM8.vcf.gz", package = "RADstackshelpR"))
nrow(opt.m[[1]])
test_that("optimize_bigM generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"),
M2 = system.file("extdata", "bigM2.vcf.gz", package = "RADstackshelpR"),
M3 = system.file("extdata", "bigM3.vcf.gz", package = "RADstackshelpR"),
M4 = system.file("extdata", "bigM4.vcf.gz", package = "RADstackshelpR"),
M5 = system.file("extdata", "bigM5.vcf.gz", package = "RADstackshelpR"),
M6 = system.file("extdata", "bigM6.vcf.gz", package = "RADstackshelpR"),
M7 = system.file("extdata", "bigM7.vcf.gz", package = "RADstackshelpR"),
M8 = system.file("extdata", "bigM8.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 152)
})
test_that("optimize_n generates output of the appropriate class (list)", {
#find data in local directory
#opt.m<-optimize_n(nequalsMminus1 = "~/Desktop/RADstackshelpR/inst/extdata/nequalsmminus1.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list"
expect_is(opt.m, "list" )
})
test_that("optimize_n generates a list with length of 5", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list"
expect_equal(length(opt.m), 4)
})
test_that("optimize_n generates an error if run with a non-vcf file", {
#expect error trying to read this vector as a vcf file
expect_error(optimize_n(nequalsMminus1 = system.file("extdata", "denovo.stacks.pipeline.sh", package = "RADstackshelpR"))
)
})
test_that("optimize_n generates a list with the appropriate names", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list" with appropriately named components
expect_equal(names(opt.m)[1], "snp")
expect_equal(names(opt.m)[2], "loci")
expect_equal(names(opt.m)[3], "snp.R80")
expect_equal(names(opt.m)[4], "loci.R80")
})
test_that("optimize_n generates a list with each object inside being a dataframe", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list", with each object inside being a "data.frame" object
for (i in length(opt.m)){
expect_is(opt.m[[i]], "data.frame")
}
})
test_that("optimize_n generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"),
nequalsM = system.file("extdata", "nequalsm.vcf.gz", package = "RADstackshelpR"),
nequalsMplus1 = system.file("extdata", "nequalsmplus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 15)
})
test_that("optimize_n generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"),
nequalsM = system.file("extdata", "nequalsm.vcf.gz", package = "RADstackshelpR"),
nequalsMplus1 = system.file("extdata", "nequalsmplus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 42)
})
test_that("optimize_n generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"),
nequalsM = system.file("extdata", "nequalsm.vcf.gz", package = "RADstackshelpR"),
nequalsMplus1 = system.file("extdata", "nequalsmplus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 57)
})
test_that("vis_depth generates output of the appropriate class (ggplot)", {
#find data in local directory
#opt.m<-optimize_bigM(M1 = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_depth returns an object of class "ggplot"
expect_is(vis_depth(output = opt.m), "ggplot")
})
test_that("vis_depth generates a ggplot object with length of 9", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_depth returns an object with length = 9
expect_equal(length(vis_depth(output = opt.m)), 9)
})
test_that("vis_depth generates an error if run with a non-vcf file", {
#generate random vector
x<-rnorm(100)
#expect error trying to read this vector when you need the output list from optimize_m()
expect_error(vis_depth(output = x))
})
test_that("vis_depth generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_depth returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_depth(output = opt.m)[[1]]), 25)
})
test_that("vis_depth generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_depth returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_depth(output = opt.m)[[1]]), 95)
})
test_that("vis_snps generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_snps(output = opt.m)[[1]]), 25)
})
test_that("vis_snps generates output of the appropriate class (ggplot)", {
#find data in local directory
#opt.m<-optimize_bigM(M1 = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object of class "ggplot"
expect_is(vis_snps(output = opt.m), "ggplot")
})
test_that("vis_snps generates a ggplot object with length of 9", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object with length = 9
expect_equal(length(vis_snps(output = opt.m)), 9)
})
test_that("vis_snps generates an error if run with a non-vcf file", {
#generate random vector
x<-rnorm(100)
#expect error trying to read this vector when you need the output list from optimize_m()
expect_error(vis_snps(output = x))
})
test_that("vis_snps generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_snps(output = opt.m)[[1]]), 95)
})
context("vis_loci")
library(RADstackshelpR)
test_that("vis_loci generates output of the appropriate class (ggplot)", {
#find data in local directory
#opt.m<-optimize_bigM(M1 = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_loci returns an object of class "ggplot"
expect_is(vis_loci(output = opt.m), "ggplot")
})
test_that("vis_loci generates a ggplot object with length of 9", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_loci returns an object with length = 9
expect_equal(length(vis_loci(output = opt.m)), 9)
})
test_that("vis_loci generates an error if run with a non-vcf file", {
#generate random vector
x<-rnorm(100)
#expect error trying to read this vector when you need the output list from optimize_m()
expect_error(vis_loci(output = x))
})
test_that("vis_loci generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_loci returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_loci(output = opt.m)[[1]]), 95)
})
build_articles()
build_site()
build_site()
