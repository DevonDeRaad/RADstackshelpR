test_that("vis_depth generates an error if run with a non-vcf file", {
#generate random vector
x<-rnorm(100)
#expect error trying to read this vector when you need the output list from optimize_m()
expect_error(vis_depth(output = x))
})
test_that("vis_depth generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_depth returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_depth(output = opt.m)[[1]]), 25)
})
test_that("vis_depth generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_depth returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_depth(output = opt.m)[[1]]), 95)
})
test_that("vis_snps generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_snps(output = opt.m)[[1]]), 25)
})
test_that("vis_snps generates output of the appropriate class (ggplot)", {
#find data in local directory
#opt.m<-optimize_bigM(M1 = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object of class "ggplot"
expect_is(vis_snps(output = opt.m), "ggplot")
})
test_that("vis_snps generates a ggplot object with length of 9", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object with length = 9
expect_equal(length(vis_snps(output = opt.m)), 9)
})
test_that("vis_snps generates an error if run with a non-vcf file", {
#generate random vector
x<-rnorm(100)
#expect error trying to read this vector when you need the output list from optimize_m()
expect_error(vis_snps(output = x))
})
test_that("vis_snps generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_snps(output = opt.m)[[1]]), 95)
})
context("vis_loci")
library(RADstackshelpR)
test_that("vis_loci generates output of the appropriate class (ggplot)", {
#find data in local directory
#opt.m<-optimize_bigM(M1 = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_loci returns an object of class "ggplot"
expect_is(vis_loci(output = opt.m), "ggplot")
})
test_that("vis_loci generates a ggplot object with length of 9", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_loci returns an object with length = 9
expect_equal(length(vis_loci(output = opt.m)), 9)
})
test_that("vis_loci generates an error if run with a non-vcf file", {
#generate random vector
x<-rnorm(100)
#expect error trying to read this vector when you need the output list from optimize_m()
expect_error(vis_loci(output = x))
})
test_that("vis_loci generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_loci returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_loci(output = opt.m)[[1]]), 95)
})
build_articles()
build_site()
build_site()
devtools::document()
example("add")
examples("add")
example("add")
example("vis_snps")
library(RADstackshelpR)
example("vis_snps")
library(RADstackshelpR)
library(RADstackshelpR)
library(RADstackshelpR)
pkgdown::build_site()
build_site(examples=TRUE)
pkgdown::build_site(examples = TRUE)
devtools::document()
system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR")
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
save(opt.m, "~/Desktop/RADstackshelpR/inst/extdata/optimize.m.output.rda")
save(opt.m, "~/Desktop/RADstackshelpR/inst/extdata/optimize.m.output.Rdata")
save(opt.m, file = "~/Desktop/RADstackshelpR/inst/extdata/optimize.m.output.Rdata")
devtools::document()
devtools::document()
vis_loci(output = system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"), stacks_param = "M")
data(system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"))
View(opt.m)
devtools::document()
system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR")
devtools::document()
devtools::document()
library(RADstackshelpR)
pkgdown::build_site(examples = TRUE)
devtools::document()
pkgdown::build_site(examples = TRUE)
optimize_m(M1 = system.file("extdata", "M1.vcf.gz", package = "RADstackshelpR"))
vis_snps(output = system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"), stacks_param = "m")
load(system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"))
rm(list=ls())
load(system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"))
x<-load(system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"))
devtools::document()
pkgdown::build_site(examples = TRUE)
saveRDS(opt.m, file="~/Desktop/RADstackshelpR/inst/extdata/optimize.m.output.RDS")
vis_loci(output = system.file("extdata", "optimize.m.output.RDS", package = "RADstackshelpR"), stacks_param = "m")
vis_loci(output = read.RDS(system.file("extdata", "optimize.m.output.RDS", package = "RADstackshelpR")), stacks_param = "m")
vis_loci(output = readRDS(system.file("extdata", "optimize.m.output.RDS", package = "RADstackshelpR")), stacks_param = "m")
vis_loci(output = load(system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR")), stacks_param = "m")
vis_loci(output = readRDS(system.file("extdata", "optimize.m.output.RDS", package = "RADstackshelpR")), stacks_param = "m")
devtools::document()
pkgdown::build_site(examples = TRUE)
optimize_bigM(M1 = system.file("extdata", "M1.vcf.gz", package = "RADstackshelpR"))
system.file("extdata", "M1.vcf.gz", package = "RADstackshelpR")
system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR")
devtools::document()
pkgdown::build_site(examples = TRUE)
devtools::document()
pkgdown::build_site(examples = TRUE)
devtools::build_vignettes()
devtools::build_vignettes(pkg = "RADstackshelpR")
devtools::build_vignettes(pkg = ".")
devtools::build_vignettes(pkg = ".")
pwd()
getwd()
devtools::build_vignettes(pkg = ".")
pkgdown::build_articles()
pkgdown::build_articles()
devtools::build_vignettes(pkg = ".")
pkgdown::build_articles()
devtools::build_vignettes(pkg = ".")
update.packages("devtools")
library(devtools)
update.packages("usethis")
devtools::build_vignettes(pkg = ".")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools
package_version("devtools")
packageVersion("devtools")
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
packageVersion("devtools")
library(usethis)
install.packages("devtools")
library(RADstackshelpR)
Sys.which("pdf.latex")
Sys.which("pdflatex")
install.packages("devtools")
Sys.getenv(libgit2)
Sys.getenv(pdflatex)
Sys.getenv("libgit2")
Sys.which("pdflatex")
Sys.which("libgit2")
install.packages("libgit2-dev")
install.packages("gert")
install.packages("libgit2")
install.packages("devtools")
install.packages("devtools")
ls(/usr/local/Cellar/libgit2/1.1.0/)
ls("/usr/local/Cellar/libgit2/1.1.0/")
ls("~/usr/local/Cellar/libgit2/1.1.0/")
list.files()
list.files("/usr/local/Cellar/libgit2/1.1.0/")
list.files("/usr/local/Cellar/libgit2/1.1.0/include/")
list.files("-I/usr/local/Cellar/libgit2/1.1.0/include")
list.files("I/usr/local/Cellar/libgit2/1.1.0/include")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
which git
install.packages("usethis")
install.packages("gert")
install.packages("gert")
remotes::install_github("r-lib/gert")
install.packages('devtools',repos = 'http://cran.us.r-project.org')
Sys.setenv(USE_SYSTEM_LIBGIT2=1)
install.packages("gert")
Sys.setenv(PKG_CFLAGS=-I /usr/local/Cellar/libgit2/1.1.0/include)
Sys.setenv(PKG_CFLAGS=/usr/local/Cellar/libgit2/1.1.0/include)
Sys.setenv(PKG_CFLAGS=usr/local/Cellar/libgit2/1.1.0/include)
install.packages("gert")
install.packages("gert")
install.pacl
install.packages("devtools")
install.packages("usethis")
install.packages("dyld")
install.packages("gridExtra")
install.packages("vcfR")
install.packages("ggextra")
install.packages("ggridges")
library(RADstackshelpR)
library(RADstackshelpR)
library(vcfR)
library(RADstackshelpR)
R.version
Sys.which("R")
library(devtools)
build_vignettes()
library(devtools)
build_vignettes()
build_site()
library(devtools)
build_vignettes()
build_site()
library(rmarkdown)
version
update.packages("rmarkdown")
packageVersion("rmarkdown")
.Last.error.trace
install.packages("rhub")
library(rhub)
cran_prep <- check_for_cran()
validate_email()
cran_prep <- check_for_cran()
cran_prep$cran_summary()
cran_prep$cran_summary()
cran_prep$cran_summary()
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
getwd()
system.file("extdata", "nequalsM.vcf.gz", package = "RADstackshelpR")
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
library(rhub)
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
cran_prep$cran_summary()
cran_prep$cran_summary()
library(RADstackshelpR)
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
library(devtools)
library(RADstackshelpR)
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
library(rhub)
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
#now run cran_summary to ensure that the package is ready for CRAN submission
cran_prep$cran_summary()
library(RADstackshelpR)
library(rhub)
#make sure to build this tarball using the following code in a terminal window, while one level above the package repository
###/Users/devder/opt/anaconda3/bin/R CMD build RADstackshelpR
#this points to the current release of R on my local machine and builds the package tarball
#now test package build on the same operating systems that CRAN uses, by pointing this function to the built tarball for the package
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
#now run cran_summary to ensure that the package is ready for CRAN submission
cran_prep$cran_summary()
#library rhub
library(rhub)
#verify that package is ready for CRAN
#install rhub
install.packages("rhub")
#library rhub
library(rhub)
library(RADstackshelpR)
#now test package build on the same operating systems that CRAN uses, by pointing this function to the built tarball for the package
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
#now run cran_summary to ensure that the package is ready for CRAN submission
cran_prep$cran_summary()
#library rhub
library(rhub)
#make sure to build this tarball using the following code in a terminal window, while one level above the package repository
###/Users/devder/opt/anaconda3/bin/R CMD build RADstackshelpR
#this points to the current release of R on my local machine and builds the package tarball
#now test package build on the same operating systems that CRAN uses, by pointing this function to the built tarball for the package
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
#now run cran_summary to ensure that the package is ready for CRAN submission
cran_prep$cran_summary()
#now run cran_summary to ensure that the package is ready for CRAN submission
cran_prep$cran_summary()
#now run cran_summary to ensure that the package is ready for CRAN submission
cran_prep$cran_summary()
usethis::use_cran_comments()
library(RADstackshelpR)
m.out<-optimize_m(m3="/Users/devder/Desktop/brown.trout/m_3.vcf",
m4="/Users/devder/Desktop/brown.trout/m_4.vcf",
m5="/Users/devder/Desktop/brown.trout/m_5.vcf",
m6="/Users/devder/Desktop/brown.trout/m_6.vcf",
m7="/Users/devder/Desktop/brown.trout/m_7.vcf")
m.out<-optimize_m(m3="/Users/devder/Desktop/brown.trout/m3.vcf",
m4="/Users/devder/Desktop/brown.trout/m4.vcf",
m5="/Users/devder/Desktop/brown.trout/m5.vcf",
m6="/Users/devder/Desktop/brown.trout/m6.vcf",
m7="/Users/devder/Desktop/brown.trout/m7.vcf")
#visualize the effect of varying m on the depth of each sample
vis_depth(output = m.out)
#visualize the effect of varying m on the number of SNPs retained
vis_snps(output = m.out, stacks_param = "m")
#visualize the effect of varying m on the number of loci retained
vis_loci(output = m.out, stacks_param = "m")
![Iterations of m values from the original paper]("~/Desktop/Screen Shot 2021-08-16 at 10.26.29 AM.png")
![Iterations of m values from the original paper](~/Desktop/Screen Shot 2021-08-16 at 10.26.29 AM.png)
knitr::include_graphics("~/Desktop/Screen Shot 2021-08-16 at 10.26.29 AM.png")
library(devtoo.s)
library(devtools)
build_readme()
build_readme()
build_vignettes()
build_site()
.Last.error.trace
knitr::include_graphics("~/Desktop/Screen Shot 2021-08-16 at 10.26.29 AM.png")
update.packages(ask = FALSE)
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
build_site()
M.out<-optimize_bigM(M1="/Users/devder/Desktop/brown.trout/bigM1.vcf",
M2="/Users/devder/Desktop/brown.trout/bigM2.vcf",
M3="/Users/devder/Desktop/brown.trout/bigM3.vcf",
M4="/Users/devder/Desktop/brown.trout/bigM4.vcf",
M5="/Users/devder/Desktop/brown.trout/bigM5.vcf",
M6="/Users/devder/Desktop/brown.trout/bigM6.vcf",
M7="/Users/devder/Desktop/brown.trout/bigM7.vcf")
devtools::install_github("DevonDeRaad/RADstackshelpR")
library(RADstackshelpR)
M.out<-optimize_bigM(M1="/Users/devder/Desktop/brown.trout/bigM1.vcf",
M2="/Users/devder/Desktop/brown.trout/bigM2.vcf",
M3="/Users/devder/Desktop/brown.trout/bigM3.vcf",
M4="/Users/devder/Desktop/brown.trout/bigM4.vcf",
M5="/Users/devder/Desktop/brown.trout/bigM5.vcf",
M6="/Users/devder/Desktop/brown.trout/bigM6.vcf",
M7="/Users/devder/Desktop/brown.trout/bigM7.vcf")
vis_loci(output = M.out, stacks_param = "M")
knitr::include_graphics("~/Desktop/Screen Shot 2021-08-17 at 5.43.45 PM.png")
M.out<-optimize_bigM(M1="/Users/devder/Desktop/brown.trout/bigM1.vcf",
M2="/Users/devder/Desktop/brown.trout/bigM5.vcf",
M3="/Users/devder/Desktop/brown.trout/bigM3.vcf",
M4="/Users/devder/Desktop/brown.trout/bigM2.vcf",
M5="/Users/devder/Desktop/brown.trout/bigM5.vcf",
M6="/Users/devder/Desktop/brown.trout/bigM6.vcf",
M7="/Users/devder/Desktop/brown.trout/bigM7.vcf")
M.out<-optimize_bigM(M1="/Users/devder/Desktop/brown.trout/bigM1.vcf",
M2="/Users/devder/Desktop/brown.trout/bigM5.vcf",
M3="/Users/devder/Desktop/brown.trout/bigM3.vcf",
M4="/Users/devder/Desktop/brown.trout/bigM2.vcf",
M5="/Users/devder/Desktop/brown.trout/bigM5.vcf",
M6="/Users/devder/Desktop/brown.trout/bigM6.vcf",
M7="/Users/devder/Desktop/brown.trout/bigM7.vcf")
#           M8="/Users/devder/Desktop/brown.trout/bigM8.vcf")
#visualize the effect of varying M on the number of SNPs retained
vis_snps(output = M.out, stacks_param = "M")
#visualize the effect of varying M on the number of polymorphic loci retained
vis_loci(output = M.out, stacks_param = "M")
M.out<-optimize_bigM(M1="/Users/devder/Desktop/brown.trout/bigM1.vcf",
M2="/Users/devder/Desktop/brown.trout/bigM2.vcf",
M3="/Users/devder/Desktop/brown.trout/bigM3.vcf",
M4="/Users/devder/Desktop/brown.trout/bigM4.vcf",
M5="/Users/devder/Desktop/brown.trout/bigM5.vcf",
M6="/Users/devder/Desktop/brown.trout/bigM6.vcf",
M7="/Users/devder/Desktop/brown.trout/bigM7.vcf",
M8="/Users/devder/Desktop/brown.trout/bigM8.vcf")
#visualize the effect of varying M on the number of SNPs retained
vis_snps(output = M.out, stacks_param = "M")
#visualize the effect of varying M on the number of polymorphic loci retained
vis_loci(output = M.out, stacks_param = "M")
n.out<-optimize_n(nequalsMminus1="/Users/devder/Desktop/brown.trout/n1.vcf",
nequalsM="/Users/devder/Desktop/brown.trout/n2.vcf",
nequalsMplus1="/Users/devder/Desktop/brown.trout/n3.vcf")
#visualize the effect of varying n on the number of SNPs retained
vis_snps(output = n.out, stacks_param = "n")
#visualize the effect of varying n on the number of polymorphic loci retained
vis_loci(output = n.out, stacks_param = "n")
gl<-list()
gl[[1]]<-vis_depth(output = m.out)
m.out<-optimize_m(m3="/Users/devder/Desktop/brown.trout/m3.vcf",
m4="/Users/devder/Desktop/brown.trout/m4.vcf",
m5="/Users/devder/Desktop/brown.trout/m5.vcf",
m6="/Users/devder/Desktop/brown.trout/m6.vcf",
m7="/Users/devder/Desktop/brown.trout/m7.vcf")
#visualize the effect of varying m on the depth of each sample
vis_depth(output = m.out)
#visualize the effect of varying m on the number of SNPs retained
vis_snps(output = m.out, stacks_param = "m")
#visualize the effect of varying m on the number of loci retained
vis_loci(output = m.out, stacks_param = "m")
gl<-list()
gl[[1]]<-vis_depth(output = m.out)
gl[[2]]<-vis_snps(output = m.out, stacks_param = "m")
gl[[3]]<-vis_loci(output = m.out, stacks_param = "m")
gl[[4]]<-vis_snps(output = M.out, stacks_param = "M")
gl[[5]]<-vis_loci(output = M.out, stacks_param = "M")
gl[[6]]<-vis_snps(output = n.out, stacks_param = "n")
gl[[7]]<-vis_loci(output = n.out, stacks_param = "n")
grid.arrange(
grobs = gl,
widths = c(1,1,1,1,1,1),
layout_matrix = rbind(c(1,1,2,2,3,3),
c(4,4,4,5,5,5),
c(6,6,6,7,7,7))
)
library(gridExtra)
grid.arrange(
grobs = gl,
widths = c(1,1,1,1,1,1),
layout_matrix = rbind(c(1,1,2,2,3,3),
c(4,4,4,5,5,5),
c(6,6,6,7,7,7))
)
build_site()
system.file("articles","brown.trout.validation_files", "trt.bigM.png", package="RADstackshelpR",mustWork=TRUE))
system.file("articles","brown.trout.validation_files", "trt.bigM.png", package="RADstackshelpR",mustWork=TRUE)
devtools::install_github("DevonDeRaad/RADstackshelpR")
system.file("articles","brown.trout.validation_files", "trt.bigM.png", package="RADstackshelpR",mustWork=TRUE)
knitr::include_graphics(system.file("articles","brown.trout.validation_files", "trt.bigM.png", package="RADstackshelpR"))
system.file("articles","brown.trout.validation_files","trt.bigM.png",package="RADstackshelpR")
system.file("extdata","m3.vcf.gz",package="RADstackshelpR",mustWork=TRUE)
knitr::include_graphics(system.file("articles","trt.bigM.png",package="RADstackshelpR"))
system.file("extdata","m3.vcf.gz",package="RADstackshelpR",mustWork=TRUE)
knitr::include_graphics(system.file("docs","articles","trt.bigM.png",package="RADstackshelpR"))
knitr::include_graphics("trt.bigM.png")
build_site()
library(devtools)
build_site()
build_site()
build_vignettes
build_vignettes()
build_readme()
library(RADstackshelpR)
library(RADstackshelpR)
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
#now run cran_summary to ensure that the package is ready for CRAN submission
cran_prep$cran_summary()
library(rhub)
#make sure to build this tarball using the following code in a terminal window, while one level above the package repository
###/Users/devder/opt/anaconda3/bin/R CMD build RADstackshelpR
#this points to the current release of R on my local machine and builds the package tarball
#now test package build on the same operating systems that CRAN uses, by pointing this function to the built tarball for the package
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
#verify that package is ready for CRAN
#install rhub
install.packages("rhub")
library(rhub)
#make sure to build this tarball using the following code in a terminal window, while one level above the package repository
###/Users/devder/opt/anaconda3/bin/R CMD build RADstackshelpR
#this points to the current release of R on my local machine and builds the package tarball
#now test package build on the same operating systems that CRAN uses, by pointing this function to the built tarball for the package
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
#verify that package is ready for CRAN
#install rhub
install.packages("rhub")
library(rhub)
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
cran_prep$cran_summary()
library(devtools)
build_vignettes()
build_site()
snpfiltR
install.packages("roxygen2")
devtools::create("SNPfiltR")
devtools::build_readme()
devtools::build_readme()
<!-- badges: start -->
![CRAN-status](https://www.r-pkg.org/badges/version-last-release/RADstackshelpR)
![CRAN-Downloads](https://cranlogs.r-pkg.org/badges/grand-total/RADstackshelpR)
![License](https://img.shields.io/badge/licence-MIT-red.svg)
<!-- badges: end -->
![CRAN-status](https://www.r-pkg.org/badges/version-last-release/RADstackshelpR)
devtools::build_readme()
devtools::build_readme()
devtools::build_site()
devtools::build_site()
devtools::build_readme()
devtools::build_site()
