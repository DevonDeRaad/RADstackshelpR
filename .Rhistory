#test that optimize_m returns an object of class "list"
expect_is(opt.m, "list" )
})
test_that("optimize_m generates a list with length of 5", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list"
expect_equal(length(opt.m), 5 )
})
test_that("optimize_m generates an error if run with a non-vcf file", {
#expect error trying to read this vector as a vcf file
expect_error(optimize_m(m3 = system.file("extdata", "denovo.stacks.pipeline.sh", package = "RADstackshelpR"))
)
})
test_that("optimize_m generates a list with the appropriate names", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list" with appropriately named components
expect_equal(names(opt.m)[1], "depth")
expect_equal(names(opt.m)[2], "snp")
expect_equal(names(opt.m)[3], "loci")
expect_equal(names(opt.m)[4], "snp.R80")
expect_equal(names(opt.m)[5], "loci.R80")
})
test_that("optimize_m generates a list with each object inside being a dataframe", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list", with each object inside being a "data.frame" object
for (i in length(opt.m)){
expect_is(opt.m[[i]], "data.frame")
}
})
test_that("optimize_m generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 25)
})
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
nrow(opt.m[[1]])
View(opt.m)
opt.m[["depth"]]
test_that("optimize_m generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that optimize_m returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 95)
})
test_that("optimize_bigM generates output of the appropriate class (list)", {
#find data in local directory
#opt.m<-optimize_bigM(M1 = "~/Desktop/RADstackshelpR/inst/extdata/bigM1.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list"
expect_is(opt.m, "list" )
})
test_that("optimize_bigM generates a list with length of 5", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list"
expect_equal(length(opt.m), 4)
})
test_that("optimize_bigM generates an error if run with a non-vcf file", {
#expect error trying to read this vector as a vcf file
expect_error(optimize_bigM(M1 = system.file("extdata", "denovo.stacks.pipeline.sh", package = "RADstackshelpR"))
)
})
test_that("optimize_bigM generates a list with the appropriate names", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list" with appropriately named components
expect_equal(names(opt.m)[1], "snp")
expect_equal(names(opt.m)[2], "loci")
expect_equal(names(opt.m)[3], "snp.R80")
expect_equal(names(opt.m)[4], "loci.R80")
})
test_that("optimize_bigM generates a list with each object inside being a dataframe", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list", with each object inside being a "data.frame" object
for (i in length(opt.m)){
expect_is(opt.m[[i]], "data.frame")
}
})
test_that("optimize_bigM generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"),
M2 = system.file("extdata", "bigM2.vcf.gz", package = "RADstackshelpR"),
M3 = system.file("extdata", "bigM3.vcf.gz", package = "RADstackshelpR"),
M4 = system.file("extdata", "bigM4.vcf.gz", package = "RADstackshelpR"),
M5 = system.file("extdata", "bigM5.vcf.gz", package = "RADstackshelpR"),
M6 = system.file("extdata", "bigM6.vcf.gz", package = "RADstackshelpR"),
M7 = system.file("extdata", "bigM7.vcf.gz", package = "RADstackshelpR"),
M8 = system.file("extdata", "bigM8.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 40)
})
nrow(opt.m[[1]])
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"),
M2 = system.file("extdata", "bigM2.vcf.gz", package = "RADstackshelpR"),
M3 = system.file("extdata", "bigM3.vcf.gz", package = "RADstackshelpR"),
M4 = system.file("extdata", "bigM4.vcf.gz", package = "RADstackshelpR"),
M5 = system.file("extdata", "bigM5.vcf.gz", package = "RADstackshelpR"),
M6 = system.file("extdata", "bigM6.vcf.gz", package = "RADstackshelpR"),
M7 = system.file("extdata", "bigM7.vcf.gz", package = "RADstackshelpR"),
M8 = system.file("extdata", "bigM8.vcf.gz", package = "RADstackshelpR"))
nrow(opt.m[[1]])
test_that("optimize_bigM generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_bigM(M1 = system.file("extdata", "bigM1.vcf.gz", package = "RADstackshelpR"),
M2 = system.file("extdata", "bigM2.vcf.gz", package = "RADstackshelpR"),
M3 = system.file("extdata", "bigM3.vcf.gz", package = "RADstackshelpR"),
M4 = system.file("extdata", "bigM4.vcf.gz", package = "RADstackshelpR"),
M5 = system.file("extdata", "bigM5.vcf.gz", package = "RADstackshelpR"),
M6 = system.file("extdata", "bigM6.vcf.gz", package = "RADstackshelpR"),
M7 = system.file("extdata", "bigM7.vcf.gz", package = "RADstackshelpR"),
M8 = system.file("extdata", "bigM8.vcf.gz", package = "RADstackshelpR"))
#test that optimize_bigM returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 152)
})
test_that("optimize_n generates output of the appropriate class (list)", {
#find data in local directory
#opt.m<-optimize_n(nequalsMminus1 = "~/Desktop/RADstackshelpR/inst/extdata/nequalsmminus1.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list"
expect_is(opt.m, "list" )
})
test_that("optimize_n generates a list with length of 5", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list"
expect_equal(length(opt.m), 4)
})
test_that("optimize_n generates an error if run with a non-vcf file", {
#expect error trying to read this vector as a vcf file
expect_error(optimize_n(nequalsMminus1 = system.file("extdata", "denovo.stacks.pipeline.sh", package = "RADstackshelpR"))
)
})
test_that("optimize_n generates a list with the appropriate names", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list" with appropriately named components
expect_equal(names(opt.m)[1], "snp")
expect_equal(names(opt.m)[2], "loci")
expect_equal(names(opt.m)[3], "snp.R80")
expect_equal(names(opt.m)[4], "loci.R80")
})
test_that("optimize_n generates a list with each object inside being a dataframe", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list", with each object inside being a "data.frame" object
for (i in length(opt.m)){
expect_is(opt.m[[i]], "data.frame")
}
})
test_that("optimize_n generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"),
nequalsM = system.file("extdata", "nequalsm.vcf.gz", package = "RADstackshelpR"),
nequalsMplus1 = system.file("extdata", "nequalsmplus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 15)
})
test_that("optimize_n generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"),
nequalsM = system.file("extdata", "nequalsm.vcf.gz", package = "RADstackshelpR"),
nequalsMplus1 = system.file("extdata", "nequalsmplus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 42)
})
test_that("optimize_n generates dataframes with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_n(nequalsMminus1 = system.file("extdata", "nequalsmminus1.vcf.gz", package = "RADstackshelpR"),
nequalsM = system.file("extdata", "nequalsm.vcf.gz", package = "RADstackshelpR"),
nequalsMplus1 = system.file("extdata", "nequalsmplus1.vcf.gz", package = "RADstackshelpR"))
#test that optimize_n returns an object of class "list", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(opt.m[[1]]), 57)
})
test_that("vis_depth generates output of the appropriate class (ggplot)", {
#find data in local directory
#opt.m<-optimize_bigM(M1 = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_depth returns an object of class "ggplot"
expect_is(vis_depth(output = opt.m), "ggplot")
})
test_that("vis_depth generates a ggplot object with length of 9", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_depth returns an object with length = 9
expect_equal(length(vis_depth(output = opt.m)), 9)
})
test_that("vis_depth generates an error if run with a non-vcf file", {
#generate random vector
x<-rnorm(100)
#expect error trying to read this vector when you need the output list from optimize_m()
expect_error(vis_depth(output = x))
})
test_that("vis_depth generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_depth returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_depth(output = opt.m)[[1]]), 25)
})
test_that("vis_depth generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_depth returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_depth(output = opt.m)[[1]]), 95)
})
test_that("vis_snps generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_snps(output = opt.m)[[1]]), 25)
})
test_that("vis_snps generates output of the appropriate class (ggplot)", {
#find data in local directory
#opt.m<-optimize_bigM(M1 = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object of class "ggplot"
expect_is(vis_snps(output = opt.m), "ggplot")
})
test_that("vis_snps generates a ggplot object with length of 9", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object with length = 9
expect_equal(length(vis_snps(output = opt.m)), 9)
})
test_that("vis_snps generates an error if run with a non-vcf file", {
#generate random vector
x<-rnorm(100)
#expect error trying to read this vector when you need the output list from optimize_m()
expect_error(vis_snps(output = x))
})
test_that("vis_snps generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_snps returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_snps(output = opt.m)[[1]]), 95)
})
context("vis_loci")
library(RADstackshelpR)
test_that("vis_loci generates output of the appropriate class (ggplot)", {
#find data in local directory
#opt.m<-optimize_bigM(M1 = "~/Desktop/RADstackshelpR/inst/extdata/m3.vcf.gz")
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_loci returns an object of class "ggplot"
expect_is(vis_loci(output = opt.m), "ggplot")
})
test_that("vis_loci generates a ggplot object with length of 9", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"))
#test that vis_loci returns an object with length = 9
expect_equal(length(vis_loci(output = opt.m)), 9)
})
test_that("vis_loci generates an error if run with a non-vcf file", {
#generate random vector
x<-rnorm(100)
#expect error trying to read this vector when you need the output list from optimize_m()
expect_error(vis_loci(output = x))
})
test_that("vis_loci generates ggplot objects with appropriate dimensions when all slots are filled", {
#find data in package using CRAN friendly syntax
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
#test that vis_loci returns an object of class "ggplot", with a 25 row data.frame as the first object when all slots are filled
expect_equal(nrow(vis_loci(output = opt.m)[[1]]), 95)
})
build_articles()
build_site()
build_site()
devtools::document()
example("add")
examples("add")
example("add")
example("vis_snps")
library(RADstackshelpR)
example("vis_snps")
library(RADstackshelpR)
library(RADstackshelpR)
library(RADstackshelpR)
pkgdown::build_site()
build_site(examples=TRUE)
pkgdown::build_site(examples = TRUE)
devtools::document()
system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR")
opt.m<- optimize_m(m3 = system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR"),
m4 = system.file("extdata", "m4.vcf.gz", package = "RADstackshelpR"),
m5 = system.file("extdata", "m5.vcf.gz", package = "RADstackshelpR"),
m6 = system.file("extdata", "m6.vcf.gz", package = "RADstackshelpR"),
m7 = system.file("extdata", "m7.vcf.gz", package = "RADstackshelpR"))
save(opt.m, "~/Desktop/RADstackshelpR/inst/extdata/optimize.m.output.rda")
save(opt.m, "~/Desktop/RADstackshelpR/inst/extdata/optimize.m.output.Rdata")
save(opt.m, file = "~/Desktop/RADstackshelpR/inst/extdata/optimize.m.output.Rdata")
devtools::document()
devtools::document()
vis_loci(output = system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"), stacks_param = "M")
data(system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"))
View(opt.m)
devtools::document()
system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR")
devtools::document()
devtools::document()
library(RADstackshelpR)
pkgdown::build_site(examples = TRUE)
devtools::document()
pkgdown::build_site(examples = TRUE)
optimize_m(M1 = system.file("extdata", "M1.vcf.gz", package = "RADstackshelpR"))
vis_snps(output = system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"), stacks_param = "m")
load(system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"))
rm(list=ls())
load(system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"))
x<-load(system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR"))
devtools::document()
pkgdown::build_site(examples = TRUE)
saveRDS(opt.m, file="~/Desktop/RADstackshelpR/inst/extdata/optimize.m.output.RDS")
vis_loci(output = system.file("extdata", "optimize.m.output.RDS", package = "RADstackshelpR"), stacks_param = "m")
vis_loci(output = read.RDS(system.file("extdata", "optimize.m.output.RDS", package = "RADstackshelpR")), stacks_param = "m")
vis_loci(output = readRDS(system.file("extdata", "optimize.m.output.RDS", package = "RADstackshelpR")), stacks_param = "m")
vis_loci(output = load(system.file("extdata", "optimize.m.output.Rdata", package = "RADstackshelpR")), stacks_param = "m")
vis_loci(output = readRDS(system.file("extdata", "optimize.m.output.RDS", package = "RADstackshelpR")), stacks_param = "m")
devtools::document()
pkgdown::build_site(examples = TRUE)
optimize_bigM(M1 = system.file("extdata", "M1.vcf.gz", package = "RADstackshelpR"))
system.file("extdata", "M1.vcf.gz", package = "RADstackshelpR")
system.file("extdata", "m3.vcf.gz", package = "RADstackshelpR")
devtools::document()
pkgdown::build_site(examples = TRUE)
devtools::document()
pkgdown::build_site(examples = TRUE)
devtools::build_vignettes()
devtools::build_vignettes(pkg = "RADstackshelpR")
devtools::build_vignettes(pkg = ".")
devtools::build_vignettes(pkg = ".")
pwd()
getwd()
devtools::build_vignettes(pkg = ".")
pkgdown::build_articles()
pkgdown::build_articles()
devtools::build_vignettes(pkg = ".")
pkgdown::build_articles()
devtools::build_vignettes(pkg = ".")
update.packages("devtools")
library(devtools)
update.packages("usethis")
devtools::build_vignettes(pkg = ".")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools
package_version("devtools")
packageVersion("devtools")
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
packageVersion("devtools")
library(usethis)
install.packages("devtools")
library(RADstackshelpR)
Sys.which("pdf.latex")
Sys.which("pdflatex")
install.packages("devtools")
Sys.getenv(libgit2)
Sys.getenv(pdflatex)
Sys.getenv("libgit2")
Sys.which("pdflatex")
Sys.which("libgit2")
install.packages("libgit2-dev")
install.packages("gert")
install.packages("libgit2")
install.packages("devtools")
install.packages("devtools")
ls(/usr/local/Cellar/libgit2/1.1.0/)
ls("/usr/local/Cellar/libgit2/1.1.0/")
ls("~/usr/local/Cellar/libgit2/1.1.0/")
list.files()
list.files("/usr/local/Cellar/libgit2/1.1.0/")
list.files("/usr/local/Cellar/libgit2/1.1.0/include/")
list.files("-I/usr/local/Cellar/libgit2/1.1.0/include")
list.files("I/usr/local/Cellar/libgit2/1.1.0/include")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
which git
install.packages("usethis")
install.packages("gert")
install.packages("gert")
remotes::install_github("r-lib/gert")
install.packages('devtools',repos = 'http://cran.us.r-project.org')
Sys.setenv(USE_SYSTEM_LIBGIT2=1)
install.packages("gert")
Sys.setenv(PKG_CFLAGS=-I /usr/local/Cellar/libgit2/1.1.0/include)
Sys.setenv(PKG_CFLAGS=/usr/local/Cellar/libgit2/1.1.0/include)
Sys.setenv(PKG_CFLAGS=usr/local/Cellar/libgit2/1.1.0/include)
install.packages("gert")
install.packages("gert")
install.pacl
install.packages("devtools")
install.packages("usethis")
install.packages("dyld")
install.packages("gridExtra")
install.packages("vcfR")
install.packages("ggextra")
install.packages("ggridges")
library(RADstackshelpR)
library(RADstackshelpR)
library(vcfR)
library(RADstackshelpR)
R.version
Sys.which("R")
library(devtools)
build_vignettes()
library(devtools)
build_vignettes()
build_site()
library(devtools)
build_vignettes()
build_site()
library(rmarkdown)
version
update.packages("rmarkdown")
packageVersion("rmarkdown")
.Last.error.trace
install.packages("rhub")
library(rhub)
cran_prep <- check_for_cran()
validate_email()
cran_prep <- check_for_cran()
cran_prep$cran_summary()
cran_prep$cran_summary()
cran_prep$cran_summary()
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
getwd()
system.file("extdata", "nequalsM.vcf.gz", package = "RADstackshelpR")
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
library(rhub)
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
cran_prep$cran_summary()
cran_prep$cran_summary()
library(RADstackshelpR)
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
library(devtools)
library(RADstackshelpR)
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
library(rhub)
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
#now run cran_summary to ensure that the package is ready for CRAN submission
cran_prep$cran_summary()
library(RADstackshelpR)
library(rhub)
#make sure to build this tarball using the following code in a terminal window, while one level above the package repository
###/Users/devder/opt/anaconda3/bin/R CMD build RADstackshelpR
#this points to the current release of R on my local machine and builds the package tarball
#now test package build on the same operating systems that CRAN uses, by pointing this function to the built tarball for the package
cran_prep <- check_for_cran(path = "~/Desktop/RADstackshelpR_0.1.0.tar.gz")
#now run cran_summary to ensure that the package is ready for CRAN submission
cran_prep$cran_summary()
#library rhub
library(rhub)
#verify that package is ready for CRAN
#install rhub
install.packages("rhub")
#library rhub
library(rhub)
